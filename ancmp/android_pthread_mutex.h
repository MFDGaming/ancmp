#ifndef ANCMP_ANDROID_PTHREAD_MUTEX_H
#define ANCMP_ANDROID_PTHREAD_MUTEX_H

typedef struct
{
    int volatile value;
} android_pthread_mutex_t;
typedef long android_pthread_mutexattr_t;

enum {
    ANDROID_PTHREAD_MUTEX_NORMAL = 0,
    ANDROID_PTHREAD_MUTEX_RECURSIVE = 1,
    ANDROID_PTHREAD_MUTEX_ERRORCHECK = 2,

    ANDROID_PTHREAD_MUTEX_ERRORCHECK_NP = ANDROID_PTHREAD_MUTEX_ERRORCHECK,
    ANDROID_PTHREAD_MUTEX_RECURSIVE_NP  = ANDROID_PTHREAD_MUTEX_RECURSIVE,

    ANDROID_PTHREAD_MUTEX_DEFAULT = ANDROID_PTHREAD_MUTEX_NORMAL
};

#define ANDROID_MUTEXATTR_TYPE_MASK   0x000f
#define ANDROID_MUTEXATTR_SHARED_MASK 0x0010

#define ANDROID_PTHREAD_PROCESS_PRIVATE  0
#define ANDROID_PTHREAD_PROCESS_SHARED   1

#define ANDROID_FIELD_MASK(shift,bits)           (((1 << (bits))-1) << (shift))

#define ANDROID_FIELD_TO_BITS(val,shift,bits)    (((val) & ((1 << (bits))-1)) << (shift))

#define ANDROID_FIELD_FROM_BITS(val,shift,bits)  (((val) >> (shift)) & ((1 << (bits))-1))

#define ANDROID_MUTEX_TYPE_SHIFT      14
#define ANDROID_MUTEX_TYPE_LEN        2
#define ANDROID_MUTEX_TYPE_MASK       ANDROID_FIELD_MASK(ANDROID_MUTEX_TYPE_SHIFT,ANDROID_MUTEX_TYPE_LEN)

#define ANDROID_MUTEX_TYPE_NORMAL          0
#define ANDROID_MUTEX_TYPE_RECURSIVE       1
#define ANDROID_MUTEX_TYPE_ERRORCHECK      2

#define ANDROID_MUTEX_TYPE_TO_BITS(t)       ANDROID_FIELD_TO_BITS(t, ANDROID_MUTEX_TYPE_SHIFT, ANDROID_MUTEX_TYPE_LEN)

#define ANDROID_MUTEX_TYPE_BITS_NORMAL      ANDROID_MUTEX_TYPE_TO_BITS(ANDROID_MUTEX_TYPE_NORMAL)
#define ANDROID_MUTEX_TYPE_BITS_RECURSIVE   ANDROID_MUTEX_TYPE_TO_BITS(ANDROID_MUTEX_TYPE_RECURSIVE)
#define ANDROID_MUTEX_TYPE_BITS_ERRORCHECK  ANDROID_MUTEX_TYPE_TO_BITS(ANDROID_MUTEX_TYPE_ERRORCHECK)

#define ANDROID_MUTEX_SHARED_MASK    0x2000

#define  ANDROID_MUTEX_STATE_SHIFT      0
#define  ANDROID_MUTEX_STATE_LEN        2

#define ANDROID_MUTEX_STATE_MASK           ANDROID_FIELD_MASK(ANDROID_MUTEX_STATE_SHIFT, ANDROID_MUTEX_STATE_LEN)
#define ANDROID_MUTEX_STATE_FROM_BITS(v)   ANDROID_FIELD_FROM_BITS(v, ANDROID_MUTEX_STATE_SHIFT, ANDROID_MUTEX_STATE_LEN)
#define ANDROID_MUTEX_STATE_TO_BITS(v)     ANDROID_FIELD_TO_BITS(v, ANDROID_MUTEX_STATE_SHIFT, ANDROID_MUTEX_STATE_LEN)

#define ANDROID_MUTEX_STATE_UNLOCKED            0
#define ANDROID_MUTEX_STATE_LOCKED_UNCONTENDED  1
#define ANDROID_MUTEX_STATE_LOCKED_CONTENDED    2

#define ANDROID_MUTEX_STATE_BITS_UNLOCKED            ANDROID_MUTEX_STATE_TO_BITS(ANDROID_MUTEX_STATE_UNLOCKED)
#define ANDROID_MUTEX_STATE_BITS_LOCKED_UNCONTENDED  ANDROID_MUTEX_STATE_TO_BITS(ANDROID_MUTEX_STATE_LOCKED_UNCONTENDED)
#define ANDROID_MUTEX_STATE_BITS_LOCKED_CONTENDED    ANDROID_MUTEX_STATE_TO_BITS(ANDROID_MUTEX_STATE_LOCKED_CONTENDED)

#define ANDROID_MUTEX_OWNER_SHIFT     16
#define ANDROID_MUTEX_OWNER_LEN       16

#define ANDROID_MUTEX_OWNER_FROM_BITS(v)    ANDROID_FIELD_FROM_BITS(v,ANDROID_MUTEX_OWNER_SHIFT,ANDROID_MUTEX_OWNER_LEN)
#define ANDROID_MUTEX_OWNER_TO_BITS(v)      ANDROID_FIELD_TO_BITS(v,ANDROID_MUTEX_OWNER_SHIFT,ANDROID_MUTEX_OWNER_LEN)

#define ANDROID_MUTEX_STATE_BITS_IS_LOCKED_UNCONTENDED(v)  (((v) & ANDROID_MUTEX_STATE_MASK) == ANDROID_MUTEX_STATE_BITS_LOCKED_UNCONTENDED)

#define ANDROID_MUTEX_STATE_BITS_IS_LOCKED_CONTENDED(v)   (((v) & ANDROID_MUTEX_STATE_MASK) == ANDROID_MUTEX_STATE_BITS_LOCKED_CONTENDED)

#define ANDROID_MUTEX_STATE_BITS_FLIP_CONTENTION(v)      ((v) ^ (ANDROID_MUTEX_STATE_BITS_LOCKED_CONTENDED ^ ANDROID_MUTEX_STATE_BITS_LOCKED_UNCONTENDED))

#define  ANDROID_MUTEX_COUNTER_SHIFT         2
#define  ANDROID_MUTEX_COUNTER_LEN           11
#define  ANDROID_MUTEX_COUNTER_MASK          ANDROID_FIELD_MASK(ANDROID_MUTEX_COUNTER_SHIFT, ANDROID_MUTEX_COUNTER_LEN)

#define  ANDROID_MUTEX_COUNTER_BITS_WILL_OVERFLOW(v)    (((v) & ANDROID_MUTEX_COUNTER_MASK) == ANDROID_MUTEX_COUNTER_MASK)
#define  ANDROID_MUTEX_COUNTER_BITS_IS_ZERO(v)          (((v) & ANDROID_MUTEX_COUNTER_MASK) == 0)

#define  ANDROID_MUTEX_COUNTER_BITS_ONE      ANDROID_FIELD_TO_BITS(1,ANDROID_MUTEX_COUNTER_SHIFT,ANDROID_MUTEX_COUNTER_LEN)

#define  ANDROID_MUTEX_COUNTER_BITS_ARE_ZERO(v)  (((v) & ANDROID_MUTEX_COUNTER_MASK) == 0)

#define  ANDROID_PTHREAD_MUTEX_INITIALIZER             {0}
#define  ANDROID_PTHREAD_RECURSIVE_MUTEX_INITIALIZER   {0x4000}
#define  ANDROID_PTHREAD_ERRORCHECK_MUTEX_INITIALIZER  {0x8000}

int android_pthread_mutex_init(android_pthread_mutex_t *mutex, const android_pthread_mutexattr_t *attr);

int android_pthread_mutex_destroy(android_pthread_mutex_t *mutex);

int android_pthread_mutex_trylock(android_pthread_mutex_t *mutex);

int android_pthread_mutex_lock(android_pthread_mutex_t *mutex);

int android_pthread_mutex_unlock(android_pthread_mutex_t *mutex);

int android_pthread_mutexattr_init(android_pthread_mutexattr_t *attr);

int android_pthread_mutexattr_destroy(android_pthread_mutexattr_t *attr);

int android_pthread_mutexattr_gettype(const android_pthread_mutexattr_t *attr, int *type);

int android_pthread_mutexattr_settype(android_pthread_mutexattr_t *attr, int type);

int android_pthread_mutexattr_getpshared(const android_pthread_mutexattr_t *attr, int *pshared);

int android_pthread_mutexattr_setpshared(android_pthread_mutexattr_t *attr, int pshared);

#endif
